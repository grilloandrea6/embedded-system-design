# 0 "support/src/ov7670.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "support/src/ov7670.c"
# 1 "support/include/ov7670.h" 1


# 1 "support/include/stdint.h" 1



# 1 "/opt/or1k_toolchain/lib/gcc/or1k-elf/13.2.0/include/stdint-gcc.h" 1 3 4
# 34 "/opt/or1k_toolchain/lib/gcc/or1k-elf/13.2.0/include/stdint-gcc.h" 3 4

# 34 "/opt/or1k_toolchain/lib/gcc/or1k-elf/13.2.0/include/stdint-gcc.h" 3 4
typedef signed char int8_t;


typedef short int int16_t;


typedef long int int32_t;


typedef long long int int64_t;


typedef unsigned char uint8_t;


typedef short unsigned int uint16_t;


typedef long unsigned int uint32_t;


typedef long long unsigned int uint64_t;




typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef long int int_least32_t;
typedef long long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef short unsigned int uint_least16_t;
typedef long unsigned int uint_least32_t;
typedef long long unsigned int uint_least64_t;



typedef int int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int int_fast64_t;
typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef long long unsigned int uint_fast64_t;




typedef int intptr_t;


typedef unsigned int uintptr_t;




typedef long long int intmax_t;
typedef long long unsigned int uintmax_t;
# 5 "support/include/stdint.h" 2
# 4 "support/include/ov7670.h" 2







# 10 "support/include/ov7670.h"
typedef enum resolution_t {VGA,QVGA,QQVGA} resolution;
typedef struct camParam_t {
  uint32_t nrOfPixelsPerLine;
  uint32_t nrOfLinesPerImage;
  uint32_t pixelClockInkHz;
  uint32_t framesPerSecond;
} camParameters;

int readOv7670Register( int reg );
void writeOv7670Register(int reg , int value);
camParameters initOv7670(resolution res);
void takeSingleImageBlocking(uint32_t framebuffer);
void takeSingleImageNonBlocking(uint32_t framebuffer);
void waitForNextImage();
void enableContinues(uint32_t framebuffer);
void disableContinues();
# 2 "support/src/ov7670.c" 2






typedef struct regval_list_t{
 uint8_t reg_num;
 uint8_t value;
} regval_list;
# 172 "support/src/ov7670.c"
const regval_list ov7670_default_regs[] = {
 {0x3a, 0x04},
 {0x12, 0},




 {0x17, 0x13}, {0x18, 0x01},
 {0x32, 0xb6}, {0x19, 0x02},
 {0x1a, 0x7a}, {0x03, 0x0a},

 {0x0c, 0}, {0x3e, 0},

 {0x70, 0x3a}, {0x71, 0x35},
 {0x72, 0x11}, {0x73, 0xf0},
 {0xa2, 1},{0x15, 0x02},

 {0x7a, 0x20}, {0x7b, 0x10},
 {0x7c, 0x1e}, {0x7d, 0x35},
 {0x7e, 0x5a}, {0x7f, 0x69},
 {0x80, 0x76}, {0x81, 0x80},
 {0x82, 0x88}, {0x83, 0x8f},
 {0x84, 0x96}, {0x85, 0xa3},
 {0x86, 0xaf}, {0x87, 0xc4},
 {0x88, 0xd7}, {0x89, 0xe8},


 {0x13, 0x80 | 0x40},
 {0x00, 0}, {0x10, 0},
 {0x0d, 0x40},
 {0x14, 0x18},
 {0xa5, 0x05}, {0xab, 0x07},
 {0x24, 0x95}, {0x25, 0x33},
 {0x26, 0xe3}, {0x9f, 0x78},
 {0xa0, 0x68}, {0xa1, 0x03},
 {0xa6, 0xd8}, {0xa7, 0xd8},
 {0xa8, 0xf0}, {0xa9, 0x90},
 {0xaa, 0x94},
 {0x13, 0x80|0x40|0x04|0x01},
 {0x30,0},{0x31,0},

 {0x0e, 0x61}, {0x0f, 0x4b},
 {0x16, 0x02}, {0x1e, 0x07},
 {0x21, 0x02}, {0x22, 0x91},
 {0x29, 0x07}, {0x33, 0x0b},
 {0x35, 0x0b}, {0x37, 0x1d},
 {0x38, 0x71}, {0x39, 0x2a},
 {0x3c, 0x78}, {0x4d, 0x40},
 {0x4e, 0x20}, {0x69, 0},
                    {0x74,0x10},
 {0x8d, 0x4f}, {0x8e, 0},
 {0x8f, 0}, {0x90, 0},
 {0x91, 0}, {0x96, 0},
 {0x9a, 0}, {0xb0, 0x84},
 {0xb1, 0x0c}, {0xb2, 0x0e},
 {0xb3, 0x82}, {0xb8, 0x0a},


 {0x43, 0x0a}, {0x44, 0xf0},
 {0x45, 0x34}, {0x46, 0x58},
 {0x47, 0x28}, {0x48, 0x3a},
 {0x59, 0x88}, {0x5a, 0x88},
 {0x5b, 0x44}, {0x5c, 0x67},
 {0x5d, 0x49}, {0x5e, 0x0e},
 {0x6c, 0x0a}, {0x6d, 0x55},
 {0x6e, 0x11}, {0x6f, 0x9f},
 {0x6a, 0x40}, {0x01, 0x40},
 {0x02, 0x60},
 {0x13, 0x80|0x40|0x04|0x01|0x02},


 {0x4f, 0x80}, {0x50, 0x80},
 {0x51, 0}, {0x52, 0x22},
 {0x53, 0x5e}, {0x54, 0x80},
 {0x58, 0x9e},

 {0x41, 0x08}, {0x3f, 0},
 {0x75, 0x05}, {0x76, 0xe1},
 {0x4c, 0}, {0x77, 0x01},
 {0x3d, 0x48}, {0x4b, 0x09},
 {0xc9, 0x60},
 {0x56, 0x40},

 {0x34, 0x11}, {0x3b, 0x02|0x10},
 {0xa4, 0x82 }, {0x96, 0},
 {0x97, 0x30}, {0x98, 0x20},
 {0x99, 0x30}, {0x9a, 0x84},
 {0x9b, 0x29}, {0x9c, 0x03},
 {0x9d, 0x4c}, {0x9e, 0x3f},
 {0x78, 0x04},


 {0x79, 0x01}, {0xc8, 0xf0},
 {0x79, 0x0f}, {0xc8, 0x00},
 {0x79, 0x10}, {0xc8, 0x7e},
 {0x79, 0x0a}, {0xc8, 0x80},
 {0x79, 0x0b}, {0xc8, 0x01},
 {0x79, 0x0c}, {0xc8, 0x0f},
 {0x79, 0x0d}, {0xc8, 0x20},
 {0x79, 0x09}, {0xc8, 0x80},
 {0x79, 0x02}, {0xc8, 0xc0},
 {0x79, 0x03}, {0xc8, 0x40},
 {0x79, 0x05}, {0xc8, 0x30},
 {0x79, 0x26},

 {0xff, 0xff},
};

const regval_list vga_ov7670[] = {
        {0x0c,0},
 {0x32,0xF6},
 {0x17,0x13},
 {0x18,0x01},
 {0x19,0x02},
 {0x1a,0x7a},
 {0x03,0x0a},
 {0xff, 0xff},
};

const regval_list qvga_ov7670[] = {
        {0x0c,4},
 {0x3e, 0x19},
 {0x72, 0x11},
 {0x73, 0xf1},
 {0x17,0x16},
 {0x18,0x04},
 {0x32,0x24},
 {0x19,0x02},
 {0x1a,0x7a},
 {0x03,0x0a},
 {0xff, 0xff},
};

const regval_list qqvga_ov7670[] = {
        {0x0c,4},
 {0x3e, 0x1a},
 {0x72, 0x22},
 {0x73, 0xf2},
 {0x17,0x16},
 {0x18,0x04},
 {0x32,0xa4},
 {0x19,0x02},
 {0x1a,0x7a},
 {0x03,0x0a},
 {0xff, 0xff},
};

const regval_list rgb565_ov7670[] = {
 {0x12, 0x04},
 {0x8c, 0},
 {0x04, 0x0},
 {0x40, 0x10|0xc0},
 {0x14, 0x6A},
 {0x4f, 0xb3},
 {0x50, 0xb3},
 {0x51, 0},
 {0x52, 0x3d},
 {0x53, 0xa7},
 {0x54, 0xe4},
 {0x3d,0x40},
 {0xff, 0xff},
};

int readOv7670Register( int reg ) {
  int value, result, retry;
  retry = 0;
  value = 0x43000000 | (reg &0xFF) << 8;
  do {
      asm volatile ("l.nios_rrc %[out1],%[in1],r0,0x5":[out1]"=r"(result):[in1]"r"(value));
      retry++;
  } while (retry < 4 && (result & 0x80000000) != 0);
  return result;
}

void writeOv7670Register(int reg , int value) {
  int val = 0x42000000 | ((reg&0xFF) << 8) | (value&0xFF);
  asm volatile ("l.nios_rrc r0,%[in1],r0,0x5"::[in1]"r"(val));
}

void writeRegisterList(const regval_list *list) {
  const regval_list *next = list;
  for (;;) {
    int reg = next->reg_num;
    int value = next->value;
    if (reg == 255 && value == 255) break;
    writeOv7670Register(reg, value);
    next++;
  }
}

camParameters initOv7670(resolution res) {
  camParameters result;
  uint32_t value;
  writeOv7670Register(0x12, 0x80);
  asm volatile ("l.nios_rrc r0,%[in1],r0,0x6"::[in1]"r"(100000));
  writeRegisterList(ov7670_default_regs);
  switch (res) {
    case QQVGA : writeRegisterList(qqvga_ov7670);
                 break;
    case QVGA : writeRegisterList(qvga_ov7670);
                 break;
    default : writeRegisterList(vga_ov7670);
  }
  writeRegisterList(rgb565_ov7670);
  writeOv7670Register(0x11, 0);
  asm volatile ("l.nios_rrc r0,%[in1],r0,0x6"::[in1]"r"(2000000));
  asm volatile ("l.nios_rrc %[out1],%[in1],r0,0x7":[out1]"=r"(value):[in1]"r"(0));
  result.nrOfPixelsPerLine = (value >> 1);
  asm volatile ("l.nios_rrc %[out1],%[in1],r0,0x7":[out1]"=r"(result.nrOfLinesPerImage):[in1]"r"(1));
  asm volatile ("l.nios_rrc %[out1],%[in1],r0,0x7":[out1]"=r"(result.pixelClockInkHz):[in1]"r"(2));
  asm volatile ("l.nios_rrc %[out1],%[in1],r0,0x7":[out1]"=r"(result.framesPerSecond):[in1]"r"(3));
  return result;
}

void takeSingleImageBlocking(uint32_t framebuffer) {
  uint32_t result;
  asm volatile ("l.nios_rrr r0,%[in1],%[in2],0x7"::[in1]"r"(5),[in2]"r"(framebuffer));
  asm volatile ("l.nios_rrr r0,%[in1],%[in2],0x7"::[in1]"r"(6),[in2]"r"(2));
  do {
    asm volatile ("l.nios_rrc %[out1],%[in1],r0,0x7":[out1]"=r"(result):[in1]"r"(7));
  } while (result == 0);
}

void takeSingleImageNonBlocking(uint32_t framebuffer) {
  asm volatile ("l.nios_rrr r0,%[in1],%[in2],0x7"::[in1]"r"(5),[in2]"r"(framebuffer));
  asm volatile ("l.nios_rrr r0,%[in1],%[in2],0x7"::[in1]"r"(6),[in2]"r"(2));
}

void waitForNextImage() {
  uint32_t result;
  do {
    asm volatile ("l.nios_rrc %[out1],%[in1],r0,0x7":[out1]"=r"(result):[in1]"r"(7));
  } while (result == 0);
}
void enableContinues(uint32_t framebuffer) {
  asm volatile ("l.nios_rrr r0,%[in1],%[in2],0x7"::[in1]"r"(5),[in2]"r"(framebuffer));
  asm volatile ("l.nios_rrr r0,%[in1],%[in2],0x7"::[in1]"r"(6),[in2]"r"(1));
};

void disableContinues() {
  asm volatile ("l.nios_rrr r0,%[in1],%[in2],0x7"::[in1]"r"(6),[in2]"r"(0));
}
